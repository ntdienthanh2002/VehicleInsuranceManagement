//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VehicleInsuranceManagement.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class Customer
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Customer()
        {
            this.Feedbacks = new HashSet<Feedback>();
            this.Vehicles = new HashSet<Vehicle>();
        }

        [Display(Name = "Customer ID")]
        public int CustomerID { get; set; }

        [Display(Name = "Username")]
        [Required(ErrorMessage = "Username cannot be empty")]
        [RegularExpression(@"[A-Za-z0-9]{5,20}", ErrorMessage = "Username must be between 5 and 20 characters and contain no special characters")]
        public string Username { get; set; }

        [Display(Name = "Password")]
        [Required(ErrorMessage = "Password cannot be empty")]
        [RegularExpression(@"[A-Za-z0-9!@#$%^&*_]{8,}", ErrorMessage = "Password must contain at least 8 characters")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Confirm Password")]
        [Required(ErrorMessage = "Confirm Password cannot be empty")]
        [Compare("Password", ErrorMessage = "Password and Confirm Password are not the same")]
        [DataType(DataType.Password)]
        public string ConfirmPassword { get; set; }

        [Display(Name = "Full name")]
        [Required(ErrorMessage = "Full name cannot be empty")]
        [RegularExpression(@"[A-Za-z\s]{5,30}", ErrorMessage = "Username must be between 5 and 30 characters and contain no special characters")]
        public string CustomerName { get; set; }

        [Display(Name = "Address")]
        [Required(ErrorMessage = "Address cannot be empty")]
        [RegularExpression(@"[A-Za-z0-9\s]{10,}", ErrorMessage = "Address must contain at least 10 characters")]
        public string CustomerADD { get; set; }

        [Display(Name = "Phone number")]
        [Required(ErrorMessage = "Phone number cannot be empty")]
        //[RegularExpression(@"0\d{9,10}", ErrorMessage = "Phone number must be between 10 and 11 digits and start with 0")]
        public int CustomerPhoneNumber { get; set; }

        [Display(Name = "Email")]
        [Required(ErrorMessage = "Email cannot be empty")]
        [RegularExpression(@"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}", ErrorMessage = "Email is not valid.")]
        public string Email { get; set; }

        [Display(Name = "Citizen Identity Card")]
        [Required(ErrorMessage = "Citizen Identity Card cannot be empty")]
        [RegularExpression(@"[0-9]{12}", ErrorMessage = "Citizen Identity Card contains only 12 numbers")]
        public long CitizenIdentityCard { get; set; }

        [Display(Name = "Status")]
        public string Status { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Feedback> Feedbacks { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Vehicle> Vehicles { get; set; }
    }
}
